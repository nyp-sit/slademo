// Generated by CoffeeScript 1.10.0
(function() {
  var App, Beacon, Config, Presence, aws, express,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  express = require("express");

  aws = require("aws-sdk");

  Config = require("./config");

  Beacon = require("./routes/beacons");

  Presence = require("./routes/presence");

  App = (function() {
    function App() {
      this.convertToObject = bind(this.convertToObject, this);
      this.convertFromArray = bind(this.convertFromArray, this);
      this.sendError = bind(this.sendError, this);
      this.sendContent = bind(this.sendContent, this);
      this.router = new express();
      this.config = Config;
      this.router.use("/", express["static"](__dirname + "/client"));
      this.router.use((function(_this) {
        return function(req, res, next) {
          res.setHeader('Access-Control-Allow-Origin', "*");
          return next();
        };
      })(this));
      this.router.listen(3002, (function(_this) {
        return function() {
          var beaconRoute, presenceRoute;
          console.log("running");
          aws.config.update(_this.config.aws);
          _this.aws = aws;
          _this.dynamoDB = new _this.aws.DynamoDB();
          beaconRoute = new Beacon(_this);
          return presenceRoute = new Presence(_this);
        };
      })(this));
    }

    App.prototype.sendContent = function(req, res, content) {
      res.status(200);
      return res.json(content);
    };

    App.prototype.sendError = function(req, res, error, content) {
      res.status(error);
      return res.end(content);
    };

    App.prototype.convertFromArray = function(array) {
      var i, item, len, parsedArray;
      parsedArray = [];
      for (i = 0, len = array.length; i < len; i++) {
        item = array[i];
        parsedArray.push(this.convertToObject(item));
      }
      return parsedArray;
    };

    App.prototype.convertToObject = function(item) {
      var i, key, len, objectWithTypeAsKey, parsed, ref, typeKeys;
      parsed = {};
      ref = Object.keys(item);
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        objectWithTypeAsKey = item[key];
        typeKeys = Object.keys(objectWithTypeAsKey);
        parsed[key] = item[key][typeKeys[0]];
      }
      return parsed;
    };

    return App;

  })();

  module.exports = App;

  new App();

}).call(this);
